// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: no_2/delivery/grpc/schema/grpc.proto

package schema

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SearchRequest struct {
	SearchWord string `protobuf:"bytes,1,opt,name=searchWord,proto3" json:"searchWord,omitempty"`
	Pagination int64  `protobuf:"varint,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *SearchRequest) Reset()      { *m = SearchRequest{} }
func (*SearchRequest) ProtoMessage() {}
func (*SearchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f3ef22ae6f81755, []int{0}
}
func (m *SearchRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SearchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearchRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SearchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchRequest.Merge(m, src)
}
func (m *SearchRequest) XXX_Size() int {
	return m.Size()
}
func (m *SearchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SearchRequest proto.InternalMessageInfo

func (m *SearchRequest) GetSearchWord() string {
	if m != nil {
		return m.SearchWord
	}
	return ""
}

func (m *SearchRequest) GetPagination() int64 {
	if m != nil {
		return m.Pagination
	}
	return 0
}

type SearchResponse struct {
	Search []*Movie `protobuf:"bytes,1,rep,name=search,proto3" json:"search,omitempty"`
}

func (m *SearchResponse) Reset()      { *m = SearchResponse{} }
func (*SearchResponse) ProtoMessage() {}
func (*SearchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f3ef22ae6f81755, []int{1}
}
func (m *SearchResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SearchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearchResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SearchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchResponse.Merge(m, src)
}
func (m *SearchResponse) XXX_Size() int {
	return m.Size()
}
func (m *SearchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SearchResponse proto.InternalMessageInfo

func (m *SearchResponse) GetSearch() []*Movie {
	if m != nil {
		return m.Search
	}
	return nil
}

type Movie struct {
	Title      string    `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Year       string    `protobuf:"bytes,2,opt,name=year,proto3" json:"year,omitempty"`
	Rated      string    `protobuf:"bytes,3,opt,name=rated,proto3" json:"rated,omitempty"`
	Released   string    `protobuf:"bytes,4,opt,name=released,proto3" json:"released,omitempty"`
	Runtime    string    `protobuf:"bytes,5,opt,name=runtime,proto3" json:"runtime,omitempty"`
	Genre      string    `protobuf:"bytes,6,opt,name=genre,proto3" json:"genre,omitempty"`
	Director   string    `protobuf:"bytes,7,opt,name=director,proto3" json:"director,omitempty"`
	Writer     string    `protobuf:"bytes,8,opt,name=writer,proto3" json:"writer,omitempty"`
	Actors     string    `protobuf:"bytes,9,opt,name=actors,proto3" json:"actors,omitempty"`
	Plot       string    `protobuf:"bytes,10,opt,name=plot,proto3" json:"plot,omitempty"`
	Language   string    `protobuf:"bytes,11,opt,name=language,proto3" json:"language,omitempty"`
	Country    string    `protobuf:"bytes,12,opt,name=country,proto3" json:"country,omitempty"`
	Awards     string    `protobuf:"bytes,13,opt,name=awards,proto3" json:"awards,omitempty"`
	Poster     string    `protobuf:"bytes,14,opt,name=poster,proto3" json:"poster,omitempty"`
	Ratings    []*Rating `protobuf:"bytes,15,rep,name=ratings,proto3" json:"ratings,omitempty"`
	Metascore  string    `protobuf:"bytes,16,opt,name=metascore,proto3" json:"metascore,omitempty"`
	ImdbRating string    `protobuf:"bytes,17,opt,name=imdbRating,proto3" json:"imdbRating,omitempty"`
	ImdbVotes  string    `protobuf:"bytes,18,opt,name=imdbVotes,proto3" json:"imdbVotes,omitempty"`
	ImdbID     string    `protobuf:"bytes,19,opt,name=imdbID,proto3" json:"imdbID,omitempty"`
	Type       string    `protobuf:"bytes,20,opt,name=type,proto3" json:"type,omitempty"`
	Dvd        string    `protobuf:"bytes,21,opt,name=dvd,proto3" json:"dvd,omitempty"`
	BoxOffice  string    `protobuf:"bytes,22,opt,name=boxOffice,proto3" json:"boxOffice,omitempty"`
	Production string    `protobuf:"bytes,23,opt,name=production,proto3" json:"production,omitempty"`
	Website    string    `protobuf:"bytes,24,opt,name=website,proto3" json:"website,omitempty"`
}

func (m *Movie) Reset()      { *m = Movie{} }
func (*Movie) ProtoMessage() {}
func (*Movie) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f3ef22ae6f81755, []int{2}
}
func (m *Movie) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Movie) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Movie.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Movie) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Movie.Merge(m, src)
}
func (m *Movie) XXX_Size() int {
	return m.Size()
}
func (m *Movie) XXX_DiscardUnknown() {
	xxx_messageInfo_Movie.DiscardUnknown(m)
}

var xxx_messageInfo_Movie proto.InternalMessageInfo

func (m *Movie) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Movie) GetYear() string {
	if m != nil {
		return m.Year
	}
	return ""
}

func (m *Movie) GetRated() string {
	if m != nil {
		return m.Rated
	}
	return ""
}

func (m *Movie) GetReleased() string {
	if m != nil {
		return m.Released
	}
	return ""
}

func (m *Movie) GetRuntime() string {
	if m != nil {
		return m.Runtime
	}
	return ""
}

func (m *Movie) GetGenre() string {
	if m != nil {
		return m.Genre
	}
	return ""
}

func (m *Movie) GetDirector() string {
	if m != nil {
		return m.Director
	}
	return ""
}

func (m *Movie) GetWriter() string {
	if m != nil {
		return m.Writer
	}
	return ""
}

func (m *Movie) GetActors() string {
	if m != nil {
		return m.Actors
	}
	return ""
}

func (m *Movie) GetPlot() string {
	if m != nil {
		return m.Plot
	}
	return ""
}

func (m *Movie) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

func (m *Movie) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *Movie) GetAwards() string {
	if m != nil {
		return m.Awards
	}
	return ""
}

func (m *Movie) GetPoster() string {
	if m != nil {
		return m.Poster
	}
	return ""
}

func (m *Movie) GetRatings() []*Rating {
	if m != nil {
		return m.Ratings
	}
	return nil
}

func (m *Movie) GetMetascore() string {
	if m != nil {
		return m.Metascore
	}
	return ""
}

func (m *Movie) GetImdbRating() string {
	if m != nil {
		return m.ImdbRating
	}
	return ""
}

func (m *Movie) GetImdbVotes() string {
	if m != nil {
		return m.ImdbVotes
	}
	return ""
}

func (m *Movie) GetImdbID() string {
	if m != nil {
		return m.ImdbID
	}
	return ""
}

func (m *Movie) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Movie) GetDvd() string {
	if m != nil {
		return m.Dvd
	}
	return ""
}

func (m *Movie) GetBoxOffice() string {
	if m != nil {
		return m.BoxOffice
	}
	return ""
}

func (m *Movie) GetProduction() string {
	if m != nil {
		return m.Production
	}
	return ""
}

func (m *Movie) GetWebsite() string {
	if m != nil {
		return m.Website
	}
	return ""
}

type Rating struct {
	Source string `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Value  string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Rating) Reset()      { *m = Rating{} }
func (*Rating) ProtoMessage() {}
func (*Rating) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f3ef22ae6f81755, []int{3}
}
func (m *Rating) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rating) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rating.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rating) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rating.Merge(m, src)
}
func (m *Rating) XXX_Size() int {
	return m.Size()
}
func (m *Rating) XXX_DiscardUnknown() {
	xxx_messageInfo_Rating.DiscardUnknown(m)
}

var xxx_messageInfo_Rating proto.InternalMessageInfo

func (m *Rating) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *Rating) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func init() {
	proto.RegisterType((*SearchRequest)(nil), "schema.SearchRequest")
	proto.RegisterType((*SearchResponse)(nil), "schema.SearchResponse")
	proto.RegisterType((*Movie)(nil), "schema.Movie")
	proto.RegisterType((*Rating)(nil), "schema.Rating")
}

func init() {
	proto.RegisterFile("no_2/delivery/grpc/schema/grpc.proto", fileDescriptor_7f3ef22ae6f81755)
}

var fileDescriptor_7f3ef22ae6f81755 = []byte{
	// 572 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x93, 0xb1, 0x6e, 0xd4, 0x40,
	0x10, 0x86, 0xcf, 0x5c, 0xe2, 0xe4, 0x36, 0x24, 0x84, 0x25, 0x39, 0x46, 0x11, 0x5a, 0x45, 0x27,
	0x90, 0xae, 0x4a, 0xa4, 0x80, 0x48, 0x8f, 0x28, 0xa0, 0x40, 0x91, 0x1c, 0x09, 0x4a, 0xb4, 0x67,
	0x4f, 0x2e, 0x96, 0x7c, 0x5e, 0xb3, 0xbb, 0xbe, 0x70, 0x1d, 0x8f, 0xc0, 0x63, 0xf0, 0x28, 0x94,
	0x29, 0x53, 0x12, 0xa7, 0xa1, 0x4c, 0x43, 0x8f, 0x66, 0xc7, 0xce, 0x05, 0xba, 0xf9, 0xbf, 0xf1,
	0xfe, 0x33, 0x9e, 0x9d, 0x15, 0xcf, 0x4b, 0xf3, 0xf9, 0xe8, 0x30, 0xc3, 0x22, 0x9f, 0xa3, 0x5d,
	0x1c, 0x4e, 0x6d, 0x95, 0x1e, 0xba, 0xf4, 0x1c, 0x67, 0x3a, 0xc4, 0x07, 0x95, 0x35, 0xde, 0xc8,
	0x98, 0xd1, 0xe8, 0x44, 0x6c, 0x9e, 0xa2, 0xb6, 0xe9, 0x79, 0x82, 0x5f, 0x6a, 0x74, 0x5e, 0x2a,
	0x21, 0x5c, 0x00, 0x9f, 0x8c, 0xcd, 0x20, 0xda, 0x8f, 0xc6, 0x83, 0xe4, 0x1e, 0xa1, 0x7c, 0xa5,
	0xa7, 0x79, 0xa9, 0x7d, 0x6e, 0x4a, 0x78, 0xb0, 0x1f, 0x8d, 0xfb, 0xc9, 0x3d, 0x32, 0x3a, 0x16,
	0x5b, 0x9d, 0xa1, 0xab, 0x4c, 0xe9, 0x50, 0xbe, 0x10, 0x31, 0x9f, 0x87, 0x68, 0xbf, 0x3f, 0xde,
	0x38, 0xda, 0x3c, 0xe0, 0xda, 0x07, 0x1f, 0xcc, 0x3c, 0xc7, 0xa4, 0x4d, 0x8e, 0xfe, 0xac, 0x88,
	0xd5, 0x40, 0xe4, 0x8e, 0x58, 0xf5, 0xb9, 0x2f, 0xb0, 0xad, 0xce, 0x42, 0x4a, 0xb1, 0xb2, 0x40,
	0x6d, 0x43, 0xc9, 0x41, 0x12, 0x62, 0xfa, 0xd2, 0x6a, 0x8f, 0x19, 0xf4, 0xf9, 0xcb, 0x20, 0xe4,
	0x9e, 0x58, 0xb7, 0x58, 0xa0, 0x76, 0x98, 0xc1, 0x4a, 0x48, 0xdc, 0x69, 0x09, 0x62, 0xcd, 0xd6,
	0xa5, 0xcf, 0x67, 0x08, 0xab, 0x21, 0xd5, 0x49, 0xf2, 0x9a, 0x62, 0x69, 0x11, 0x62, 0xf6, 0x0a,
	0x82, 0xbc, 0xb2, 0xdc, 0x62, 0xea, 0x8d, 0x85, 0x35, 0xf6, 0xea, 0xb4, 0x1c, 0x8a, 0xf8, 0xc2,
	0xe6, 0x1e, 0x2d, 0xac, 0x87, 0x4c, 0xab, 0x88, 0x6b, 0xfa, 0xc0, 0xc1, 0x80, 0x39, 0x2b, 0xfa,
	0x83, 0xaa, 0x30, 0x1e, 0x04, 0xff, 0x01, 0xc5, 0xe4, 0x5f, 0xe8, 0x72, 0x5a, 0xeb, 0x29, 0xc2,
	0x06, 0xfb, 0x77, 0x9a, 0x7a, 0x4d, 0x4d, 0x5d, 0x7a, 0xbb, 0x80, 0x87, 0xdc, 0x6b, 0x2b, 0x43,
	0x85, 0x0b, 0x6d, 0x33, 0x07, 0x9b, 0x6d, 0x85, 0xa0, 0x88, 0x57, 0xc6, 0x51, 0x47, 0x5b, 0xcc,
	0x59, 0xc9, 0xb1, 0x58, 0xb3, 0xda, 0xe7, 0xe5, 0xd4, 0xc1, 0xa3, 0x70, 0x07, 0x5b, 0xdd, 0x1d,
	0x24, 0x01, 0x27, 0x5d, 0x5a, 0x3e, 0x13, 0x83, 0x19, 0x7a, 0xed, 0x52, 0x63, 0x11, 0xb6, 0x83,
	0xc9, 0x12, 0xd0, 0xe5, 0xe7, 0xb3, 0x6c, 0xc2, 0x87, 0xe0, 0x31, 0x2f, 0xc7, 0x92, 0xd0, 0x69,
	0x52, 0x1f, 0x8d, 0x47, 0x07, 0x92, 0x4f, 0xdf, 0x01, 0xea, 0x8e, 0xc4, 0xfb, 0xb7, 0xf0, 0x84,
	0xbb, 0x63, 0x45, 0x73, 0xf1, 0x8b, 0x0a, 0x61, 0x87, 0xe7, 0x42, 0xb1, 0xdc, 0x16, 0xfd, 0x6c,
	0x9e, 0xc1, 0x6e, 0x40, 0x14, 0x92, 0xf7, 0xc4, 0x7c, 0x3d, 0x39, 0x3b, 0xcb, 0x53, 0x84, 0x21,
	0x7b, 0xdf, 0x81, 0xb0, 0x96, 0xd6, 0x64, 0x75, 0x1a, 0xd6, 0xf2, 0x29, 0x77, 0xb6, 0x24, 0x34,
	0xcb, 0x0b, 0x9c, 0xb8, 0xdc, 0x23, 0x00, 0xcf, 0xb2, 0x95, 0xa3, 0xd7, 0x22, 0x6e, 0xbb, 0x1f,
	0x8a, 0xd8, 0x99, 0xda, 0xa6, 0xdd, 0xe2, 0xb5, 0x8a, 0x36, 0x63, 0xae, 0x8b, 0x1a, 0xdb, 0xd5,
	0x63, 0x71, 0xf4, 0xae, 0x7b, 0x39, 0xa7, 0x68, 0xe7, 0xd4, 0xc2, 0xb1, 0x88, 0x19, 0xc8, 0xdd,
	0x6e, 0xba, 0xff, 0x3c, 0xad, 0xbd, 0xe1, 0xff, 0x98, 0x1f, 0xc8, 0x9b, 0x57, 0x97, 0xd7, 0xaa,
	0x77, 0x75, 0xad, 0x7a, 0xb7, 0xd7, 0x2a, 0xfa, 0xd6, 0xa8, 0xe8, 0x47, 0xa3, 0xa2, 0x9f, 0x8d,
	0x8a, 0x2e, 0x1b, 0x15, 0xfd, 0x6a, 0x54, 0xf4, 0xbb, 0x51, 0xbd, 0xdb, 0x46, 0x45, 0xdf, 0x6f,
	0x54, 0xef, 0xf2, 0x46, 0xf5, 0xae, 0x6e, 0x54, 0x6f, 0x12, 0x87, 0x87, 0xfc, 0xf2, 0x6f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x57, 0x2b, 0x76, 0xee, 0xf0, 0x03, 0x00, 0x00,
}

func (this *SearchRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SearchRequest)
	if !ok {
		that2, ok := that.(SearchRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SearchWord != that1.SearchWord {
		return false
	}
	if this.Pagination != that1.Pagination {
		return false
	}
	return true
}
func (this *SearchResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SearchResponse)
	if !ok {
		that2, ok := that.(SearchResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Search) != len(that1.Search) {
		return false
	}
	for i := range this.Search {
		if !this.Search[i].Equal(that1.Search[i]) {
			return false
		}
	}
	return true
}
func (this *Movie) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Movie)
	if !ok {
		that2, ok := that.(Movie)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Year != that1.Year {
		return false
	}
	if this.Rated != that1.Rated {
		return false
	}
	if this.Released != that1.Released {
		return false
	}
	if this.Runtime != that1.Runtime {
		return false
	}
	if this.Genre != that1.Genre {
		return false
	}
	if this.Director != that1.Director {
		return false
	}
	if this.Writer != that1.Writer {
		return false
	}
	if this.Actors != that1.Actors {
		return false
	}
	if this.Plot != that1.Plot {
		return false
	}
	if this.Language != that1.Language {
		return false
	}
	if this.Country != that1.Country {
		return false
	}
	if this.Awards != that1.Awards {
		return false
	}
	if this.Poster != that1.Poster {
		return false
	}
	if len(this.Ratings) != len(that1.Ratings) {
		return false
	}
	for i := range this.Ratings {
		if !this.Ratings[i].Equal(that1.Ratings[i]) {
			return false
		}
	}
	if this.Metascore != that1.Metascore {
		return false
	}
	if this.ImdbRating != that1.ImdbRating {
		return false
	}
	if this.ImdbVotes != that1.ImdbVotes {
		return false
	}
	if this.ImdbID != that1.ImdbID {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Dvd != that1.Dvd {
		return false
	}
	if this.BoxOffice != that1.BoxOffice {
		return false
	}
	if this.Production != that1.Production {
		return false
	}
	if this.Website != that1.Website {
		return false
	}
	return true
}
func (this *Rating) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Rating)
	if !ok {
		that2, ok := that.(Rating)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Source != that1.Source {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *SearchRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&schema.SearchRequest{")
	s = append(s, "SearchWord: "+fmt.Sprintf("%#v", this.SearchWord)+",\n")
	s = append(s, "Pagination: "+fmt.Sprintf("%#v", this.Pagination)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SearchResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&schema.SearchResponse{")
	if this.Search != nil {
		s = append(s, "Search: "+fmt.Sprintf("%#v", this.Search)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Movie) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 28)
	s = append(s, "&schema.Movie{")
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	s = append(s, "Year: "+fmt.Sprintf("%#v", this.Year)+",\n")
	s = append(s, "Rated: "+fmt.Sprintf("%#v", this.Rated)+",\n")
	s = append(s, "Released: "+fmt.Sprintf("%#v", this.Released)+",\n")
	s = append(s, "Runtime: "+fmt.Sprintf("%#v", this.Runtime)+",\n")
	s = append(s, "Genre: "+fmt.Sprintf("%#v", this.Genre)+",\n")
	s = append(s, "Director: "+fmt.Sprintf("%#v", this.Director)+",\n")
	s = append(s, "Writer: "+fmt.Sprintf("%#v", this.Writer)+",\n")
	s = append(s, "Actors: "+fmt.Sprintf("%#v", this.Actors)+",\n")
	s = append(s, "Plot: "+fmt.Sprintf("%#v", this.Plot)+",\n")
	s = append(s, "Language: "+fmt.Sprintf("%#v", this.Language)+",\n")
	s = append(s, "Country: "+fmt.Sprintf("%#v", this.Country)+",\n")
	s = append(s, "Awards: "+fmt.Sprintf("%#v", this.Awards)+",\n")
	s = append(s, "Poster: "+fmt.Sprintf("%#v", this.Poster)+",\n")
	if this.Ratings != nil {
		s = append(s, "Ratings: "+fmt.Sprintf("%#v", this.Ratings)+",\n")
	}
	s = append(s, "Metascore: "+fmt.Sprintf("%#v", this.Metascore)+",\n")
	s = append(s, "ImdbRating: "+fmt.Sprintf("%#v", this.ImdbRating)+",\n")
	s = append(s, "ImdbVotes: "+fmt.Sprintf("%#v", this.ImdbVotes)+",\n")
	s = append(s, "ImdbID: "+fmt.Sprintf("%#v", this.ImdbID)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Dvd: "+fmt.Sprintf("%#v", this.Dvd)+",\n")
	s = append(s, "BoxOffice: "+fmt.Sprintf("%#v", this.BoxOffice)+",\n")
	s = append(s, "Production: "+fmt.Sprintf("%#v", this.Production)+",\n")
	s = append(s, "Website: "+fmt.Sprintf("%#v", this.Website)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Rating) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&schema.Rating{")
	s = append(s, "Source: "+fmt.Sprintf("%#v", this.Source)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringGrpc(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SearchServiceClient is the client API for SearchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SearchServiceClient interface {
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
}

type searchServiceClient struct {
	cc *grpc.ClientConn
}

func NewSearchServiceClient(cc *grpc.ClientConn) SearchServiceClient {
	return &searchServiceClient{cc}
}

func (c *searchServiceClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, "/schema.SearchService/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SearchServiceServer is the server API for SearchService service.
type SearchServiceServer interface {
	Search(context.Context, *SearchRequest) (*SearchResponse, error)
}

// UnimplementedSearchServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSearchServiceServer struct {
}

func (*UnimplementedSearchServiceServer) Search(ctx context.Context, req *SearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}

func RegisterSearchServiceServer(s *grpc.Server, srv SearchServiceServer) {
	s.RegisterService(&_SearchService_serviceDesc, srv)
}

func _SearchService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/schema.SearchService/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SearchService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "schema.SearchService",
	HandlerType: (*SearchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Search",
			Handler:    _SearchService_Search_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "no_2/delivery/grpc/schema/grpc.proto",
}

func (m *SearchRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SearchRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != 0 {
		i = encodeVarintGrpc(dAtA, i, uint64(m.Pagination))
		i--
		dAtA[i] = 0x10
	}
	if len(m.SearchWord) > 0 {
		i -= len(m.SearchWord)
		copy(dAtA[i:], m.SearchWord)
		i = encodeVarintGrpc(dAtA, i, uint64(len(m.SearchWord)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SearchResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SearchResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Search) > 0 {
		for iNdEx := len(m.Search) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Search[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGrpc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Movie) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Movie) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Movie) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Website) > 0 {
		i -= len(m.Website)
		copy(dAtA[i:], m.Website)
		i = encodeVarintGrpc(dAtA, i, uint64(len(m.Website)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if len(m.Production) > 0 {
		i -= len(m.Production)
		copy(dAtA[i:], m.Production)
		i = encodeVarintGrpc(dAtA, i, uint64(len(m.Production)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if len(m.BoxOffice) > 0 {
		i -= len(m.BoxOffice)
		copy(dAtA[i:], m.BoxOffice)
		i = encodeVarintGrpc(dAtA, i, uint64(len(m.BoxOffice)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if len(m.Dvd) > 0 {
		i -= len(m.Dvd)
		copy(dAtA[i:], m.Dvd)
		i = encodeVarintGrpc(dAtA, i, uint64(len(m.Dvd)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintGrpc(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.ImdbID) > 0 {
		i -= len(m.ImdbID)
		copy(dAtA[i:], m.ImdbID)
		i = encodeVarintGrpc(dAtA, i, uint64(len(m.ImdbID)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.ImdbVotes) > 0 {
		i -= len(m.ImdbVotes)
		copy(dAtA[i:], m.ImdbVotes)
		i = encodeVarintGrpc(dAtA, i, uint64(len(m.ImdbVotes)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.ImdbRating) > 0 {
		i -= len(m.ImdbRating)
		copy(dAtA[i:], m.ImdbRating)
		i = encodeVarintGrpc(dAtA, i, uint64(len(m.ImdbRating)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.Metascore) > 0 {
		i -= len(m.Metascore)
		copy(dAtA[i:], m.Metascore)
		i = encodeVarintGrpc(dAtA, i, uint64(len(m.Metascore)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.Ratings) > 0 {
		for iNdEx := len(m.Ratings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Ratings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGrpc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x7a
		}
	}
	if len(m.Poster) > 0 {
		i -= len(m.Poster)
		copy(dAtA[i:], m.Poster)
		i = encodeVarintGrpc(dAtA, i, uint64(len(m.Poster)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.Awards) > 0 {
		i -= len(m.Awards)
		copy(dAtA[i:], m.Awards)
		i = encodeVarintGrpc(dAtA, i, uint64(len(m.Awards)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.Country) > 0 {
		i -= len(m.Country)
		copy(dAtA[i:], m.Country)
		i = encodeVarintGrpc(dAtA, i, uint64(len(m.Country)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.Language) > 0 {
		i -= len(m.Language)
		copy(dAtA[i:], m.Language)
		i = encodeVarintGrpc(dAtA, i, uint64(len(m.Language)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Plot) > 0 {
		i -= len(m.Plot)
		copy(dAtA[i:], m.Plot)
		i = encodeVarintGrpc(dAtA, i, uint64(len(m.Plot)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Actors) > 0 {
		i -= len(m.Actors)
		copy(dAtA[i:], m.Actors)
		i = encodeVarintGrpc(dAtA, i, uint64(len(m.Actors)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Writer) > 0 {
		i -= len(m.Writer)
		copy(dAtA[i:], m.Writer)
		i = encodeVarintGrpc(dAtA, i, uint64(len(m.Writer)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Director) > 0 {
		i -= len(m.Director)
		copy(dAtA[i:], m.Director)
		i = encodeVarintGrpc(dAtA, i, uint64(len(m.Director)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Genre) > 0 {
		i -= len(m.Genre)
		copy(dAtA[i:], m.Genre)
		i = encodeVarintGrpc(dAtA, i, uint64(len(m.Genre)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Runtime) > 0 {
		i -= len(m.Runtime)
		copy(dAtA[i:], m.Runtime)
		i = encodeVarintGrpc(dAtA, i, uint64(len(m.Runtime)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Released) > 0 {
		i -= len(m.Released)
		copy(dAtA[i:], m.Released)
		i = encodeVarintGrpc(dAtA, i, uint64(len(m.Released)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Rated) > 0 {
		i -= len(m.Rated)
		copy(dAtA[i:], m.Rated)
		i = encodeVarintGrpc(dAtA, i, uint64(len(m.Rated)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Year) > 0 {
		i -= len(m.Year)
		copy(dAtA[i:], m.Year)
		i = encodeVarintGrpc(dAtA, i, uint64(len(m.Year)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintGrpc(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Rating) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rating) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rating) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintGrpc(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Source) > 0 {
		i -= len(m.Source)
		copy(dAtA[i:], m.Source)
		i = encodeVarintGrpc(dAtA, i, uint64(len(m.Source)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGrpc(dAtA []byte, offset int, v uint64) int {
	offset -= sovGrpc(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SearchRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SearchWord)
	if l > 0 {
		n += 1 + l + sovGrpc(uint64(l))
	}
	if m.Pagination != 0 {
		n += 1 + sovGrpc(uint64(m.Pagination))
	}
	return n
}

func (m *SearchResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Search) > 0 {
		for _, e := range m.Search {
			l = e.Size()
			n += 1 + l + sovGrpc(uint64(l))
		}
	}
	return n
}

func (m *Movie) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovGrpc(uint64(l))
	}
	l = len(m.Year)
	if l > 0 {
		n += 1 + l + sovGrpc(uint64(l))
	}
	l = len(m.Rated)
	if l > 0 {
		n += 1 + l + sovGrpc(uint64(l))
	}
	l = len(m.Released)
	if l > 0 {
		n += 1 + l + sovGrpc(uint64(l))
	}
	l = len(m.Runtime)
	if l > 0 {
		n += 1 + l + sovGrpc(uint64(l))
	}
	l = len(m.Genre)
	if l > 0 {
		n += 1 + l + sovGrpc(uint64(l))
	}
	l = len(m.Director)
	if l > 0 {
		n += 1 + l + sovGrpc(uint64(l))
	}
	l = len(m.Writer)
	if l > 0 {
		n += 1 + l + sovGrpc(uint64(l))
	}
	l = len(m.Actors)
	if l > 0 {
		n += 1 + l + sovGrpc(uint64(l))
	}
	l = len(m.Plot)
	if l > 0 {
		n += 1 + l + sovGrpc(uint64(l))
	}
	l = len(m.Language)
	if l > 0 {
		n += 1 + l + sovGrpc(uint64(l))
	}
	l = len(m.Country)
	if l > 0 {
		n += 1 + l + sovGrpc(uint64(l))
	}
	l = len(m.Awards)
	if l > 0 {
		n += 1 + l + sovGrpc(uint64(l))
	}
	l = len(m.Poster)
	if l > 0 {
		n += 1 + l + sovGrpc(uint64(l))
	}
	if len(m.Ratings) > 0 {
		for _, e := range m.Ratings {
			l = e.Size()
			n += 1 + l + sovGrpc(uint64(l))
		}
	}
	l = len(m.Metascore)
	if l > 0 {
		n += 2 + l + sovGrpc(uint64(l))
	}
	l = len(m.ImdbRating)
	if l > 0 {
		n += 2 + l + sovGrpc(uint64(l))
	}
	l = len(m.ImdbVotes)
	if l > 0 {
		n += 2 + l + sovGrpc(uint64(l))
	}
	l = len(m.ImdbID)
	if l > 0 {
		n += 2 + l + sovGrpc(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 2 + l + sovGrpc(uint64(l))
	}
	l = len(m.Dvd)
	if l > 0 {
		n += 2 + l + sovGrpc(uint64(l))
	}
	l = len(m.BoxOffice)
	if l > 0 {
		n += 2 + l + sovGrpc(uint64(l))
	}
	l = len(m.Production)
	if l > 0 {
		n += 2 + l + sovGrpc(uint64(l))
	}
	l = len(m.Website)
	if l > 0 {
		n += 2 + l + sovGrpc(uint64(l))
	}
	return n
}

func (m *Rating) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Source)
	if l > 0 {
		n += 1 + l + sovGrpc(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovGrpc(uint64(l))
	}
	return n
}

func sovGrpc(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGrpc(x uint64) (n int) {
	return sovGrpc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *SearchRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SearchRequest{`,
		`SearchWord:` + fmt.Sprintf("%v", this.SearchWord) + `,`,
		`Pagination:` + fmt.Sprintf("%v", this.Pagination) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SearchResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForSearch := "[]*Movie{"
	for _, f := range this.Search {
		repeatedStringForSearch += strings.Replace(f.String(), "Movie", "Movie", 1) + ","
	}
	repeatedStringForSearch += "}"
	s := strings.Join([]string{`&SearchResponse{`,
		`Search:` + repeatedStringForSearch + `,`,
		`}`,
	}, "")
	return s
}
func (this *Movie) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRatings := "[]*Rating{"
	for _, f := range this.Ratings {
		repeatedStringForRatings += strings.Replace(f.String(), "Rating", "Rating", 1) + ","
	}
	repeatedStringForRatings += "}"
	s := strings.Join([]string{`&Movie{`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`Year:` + fmt.Sprintf("%v", this.Year) + `,`,
		`Rated:` + fmt.Sprintf("%v", this.Rated) + `,`,
		`Released:` + fmt.Sprintf("%v", this.Released) + `,`,
		`Runtime:` + fmt.Sprintf("%v", this.Runtime) + `,`,
		`Genre:` + fmt.Sprintf("%v", this.Genre) + `,`,
		`Director:` + fmt.Sprintf("%v", this.Director) + `,`,
		`Writer:` + fmt.Sprintf("%v", this.Writer) + `,`,
		`Actors:` + fmt.Sprintf("%v", this.Actors) + `,`,
		`Plot:` + fmt.Sprintf("%v", this.Plot) + `,`,
		`Language:` + fmt.Sprintf("%v", this.Language) + `,`,
		`Country:` + fmt.Sprintf("%v", this.Country) + `,`,
		`Awards:` + fmt.Sprintf("%v", this.Awards) + `,`,
		`Poster:` + fmt.Sprintf("%v", this.Poster) + `,`,
		`Ratings:` + repeatedStringForRatings + `,`,
		`Metascore:` + fmt.Sprintf("%v", this.Metascore) + `,`,
		`ImdbRating:` + fmt.Sprintf("%v", this.ImdbRating) + `,`,
		`ImdbVotes:` + fmt.Sprintf("%v", this.ImdbVotes) + `,`,
		`ImdbID:` + fmt.Sprintf("%v", this.ImdbID) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Dvd:` + fmt.Sprintf("%v", this.Dvd) + `,`,
		`BoxOffice:` + fmt.Sprintf("%v", this.BoxOffice) + `,`,
		`Production:` + fmt.Sprintf("%v", this.Production) + `,`,
		`Website:` + fmt.Sprintf("%v", this.Website) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Rating) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Rating{`,
		`Source:` + fmt.Sprintf("%v", this.Source) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringGrpc(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *SearchRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchWord", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SearchWord = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			m.Pagination = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pagination |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGrpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Search", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Search = append(m.Search, &Movie{})
			if err := m.Search[len(m.Search)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGrpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Movie) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Movie: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Movie: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Year", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Year = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rated", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rated = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Released", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Released = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Runtime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Runtime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Genre", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Genre = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Director", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Director = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Writer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Writer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actors", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Actors = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plot", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Plot = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Language", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Language = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Country = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Awards", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Awards = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Poster", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Poster = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ratings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ratings = append(m.Ratings, &Rating{})
			if err := m.Ratings[len(m.Ratings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metascore", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metascore = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImdbRating", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImdbRating = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImdbVotes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImdbVotes = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImdbID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImdbID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dvd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dvd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoxOffice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BoxOffice = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Production", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Production = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Website", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Website = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGrpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rating) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Rating: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Rating: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Source = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGrpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGrpc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGrpc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGrpc
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGrpc
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGrpc
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGrpc        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGrpc          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGrpc = fmt.Errorf("proto: unexpected end of group")
)
